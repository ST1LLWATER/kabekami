{"version":3,"sources":["../src/app.ts","../src/utils/logger.ts","../src/middlewares/errorHandler.ts","../src/utils/catchAsync.ts","../src/controllers/wallpapers.controller.ts","../src/routes/wallpapers.ts","../src/routes/index.ts","../src/index.ts"],"sourcesContent":["import express, {json} from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport session from 'express-session';\r\nimport createMemoryStore from 'memorystore';\r\nimport createSessionFileStore from 'session-file-store';\r\nimport * as middlewares from './middlewares';\r\n\r\nimport routers from '@/routes';\r\n\r\nconst app = express();\r\nconst MemoryStore = createMemoryStore(session);\r\nconst SessionFileStore = createSessionFileStore(session);\r\n\r\n// CORS only in development because the app will be hosted on the same domain in prod.\r\nif (process.env.NODE_ENV === 'development')\r\n  app.use(\r\n    cors({\r\n      origin: [process.env.APP_URL || 'localhost:3000'],\r\n      credentials: true,\r\n    })\r\n  );\r\n\r\napp.use(morgan('dev'));\r\napp.use(json());\r\napp.use(\r\n  session({\r\n    cookie: {\r\n      maxAge: parseInt(\r\n        process.env.SESSION_COOKIE_MAX_AGE || (84000 * 1000).toString()\r\n      ),\r\n      sameSite: 'lax',\r\n      secure: 'auto',\r\n    },\r\n    store:\r\n      // using file store for development because memory store gets cleared every time app restarts\r\n      process.env.NODE_ENV === 'development'\r\n        ? new SessionFileStore({\r\n            path: '.session',\r\n          })\r\n        : new MemoryStore({\r\n            checkPeriod: parseInt(\r\n              process.env.SESSION_COOKIE_MAX_AGE || (84000 * 1000).toString()\r\n            ),\r\n          }),\r\n    resave: false,\r\n    saveUninitialized: false,\r\n    secret: process.env.SESSION_SECRET || process.env.SECRET || 'kabekami',\r\n  })\r\n);\r\n\r\nrouters.forEach(({router, path}) => {\r\n  if (path) {\r\n    app.use(path, router);\r\n  } else app.use(router);\r\n});\r\n\r\napp.use(middlewares.errorHandler);\r\n\r\nexport default app;\r\n","import winston from 'winston';\r\n\r\nconst logger = winston.createLogger({\r\n  level: 'info',\r\n  format: winston.format.combine(\r\n    winston.format.timestamp(),\r\n    winston.format.printf(({ timestamp, level, message }) => {\r\n      return `${timestamp} ${level}: ${message}`;\r\n    })\r\n  ),\r\n  transports: [\r\n    new winston.transports.Console(),\r\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\r\n    new winston.transports.File({ filename: 'combined.log' }),\r\n  ],\r\n});\r\n\r\nexport default logger;\r\n","import {Request, Response, NextFunction} from 'express';\r\nimport logger from '../utils/logger';\r\n\r\ninterface CustomError extends Error {\r\n  statusCode?: number;\r\n}\r\n\r\nexport const errorHandler = (\r\n  err: CustomError,\r\n  _req: Request,\r\n  res: Response,\r\n  _next: NextFunction\r\n) => {\r\n  const status = err.statusCode || 500;\r\n  const message = err.message || 'Internal Server Error';\r\n\r\n  logger.error(`Status: ${status}, Message: ${message}, Stack: ${err.stack}`);\r\n\r\n  res.status(status).json({\r\n    success: false,\r\n    status,\r\n    message,\r\n    stack: process.env.NODE_ENV === 'production' ? 'ðŸ¥ž' : err.stack,\r\n  });\r\n};\r\n","import { NextFunction, Request, Response } from 'express';\r\n\r\nexport const catchAsync =\r\n  (fn: Function) => (req: Request, res: Response, next: NextFunction) => {\r\n    Promise.resolve(fn(req, res, next)).catch(next);\r\n  };\r\n","import {catchAsync} from '../utils/catchAsync';\r\nimport {Request, Response} from 'express';\r\nimport Joi from 'joi';\r\n\r\nexport const getWallpapers = catchAsync(async (req: Request, res: Response) => {\r\n  const {value, error} = Joi.object({\r\n    limit: Joi.number().required(),\r\n    offset: Joi.number().required(),\r\n  }).validate(req.query);\r\n\r\n  if (error) {\r\n    throw error;\r\n  }\r\n\r\n  const {limit, offset} = value;\r\n  // get wallpapers from database\r\n  res.json({limit, offset});\r\n});\r\n","import * as controller from '../controllers/wallpapers.controller';\r\nimport {Router} from 'express';\r\n\r\nconst router = Router();\r\n\r\nrouter.get('/all', controller.getWallpapers);\r\n\r\nexport default router;\r\n","import type {Router as ExpressRouter} from 'express';\r\n\r\nimport wallpapers from './wallpapers';\r\n\r\nexport interface Router {\r\n  router: ExpressRouter;\r\n  path?: string;\r\n}\r\n\r\nconst routers: Router[] = [\r\n  {\r\n    router: wallpapers,\r\n    path: '/api/wallpapers',\r\n  },\r\n];\r\n\r\nexport default routers;\r\n","// eslint-disable-next-line node/global-require, @typescript-eslint/no-require-imports, @typescript-eslint/no-var-requires\r\nif (process.env.NODE_ENV !== 'production')\r\n  import('dotenv').then(({config}) => config());\r\n\r\n// eslint-disable-next-line import/first\r\nimport app from './app';\r\nimport logger from './utils/logger';\r\n\r\nconst {PORT = 5000} = process.env;\r\n\r\nconst server = app.listen(PORT, () =>\r\n  console.log(`Server started on http://localhost:${PORT}`)\r\n);\r\n\r\nconst onCloseSignal = () => {\r\n  logger.info('sigint received, shutting down');\r\n  server.close(() => {\r\n    logger.info('server closed');\r\n    process.exit();\r\n  });\r\n  setTimeout(() => process.exit(1), 10000).unref(); // Force shutdown after 10s\r\n};\r\n\r\nprocess.on('SIGINT', onCloseSignal);\r\nprocess.on('SIGTERM', onCloseSignal);\r\n"],"mappings":"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","names":["import_express","winston","Joi","express","createMemoryStore","session","createSessionFileStore","cors","morgan","router"]}